"use strict";(self.webpackChunkcodevs_co=self.webpackChunkcodevs_co||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"regular-vs-arrow","metadata":{"permalink":"/blog/regular-vs-arrow","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/regular-vs-arrow/regular-vs-arrow.mdx","source":"@site/blog/regular-vs-arrow/regular-vs-arrow.mdx","title":"Diferencia entre funciones normales y funciones flecha en javascript","description":"funciones JS","date":"2025-01-16T18:38:20.000Z","tags":[{"inline":false,"label":"JavaScript","permalink":"/blog/tags/javascript","description":"Aprende sobre JavaScript, el lenguaje de programaci\xf3n esencial para el desarrollo web interactivo."},{"inline":false,"label":"Frontend","permalink":"/blog/tags/frontend","description":"Explora el desarrollo front-end, desde el dise\xf1o hasta la interacci\xf3n del usuario."},{"inline":false,"label":"Conceptos b\xe1sicos","permalink":"/blog/tags/conceptos-basicos","description":"Aprende los conceptos b\xe1sicos de tecnolog\xedas y herramientas."}],"readingTime":3.115,"hasTruncateMarker":true,"authors":[{"name":"Juan Jos\xe9 Pel\xe1ez","title":"Codevs member","url":"https://soyjuanjohernandez.github.io/juanjoWeb/","page":{"permalink":"/blog/authors/all-juanjo-articles"},"socials":{"x":"https://x.com/soyjuanjoh","linkedin":"https://www.linkedin.com/in/soyjuanjohernandez/","github":"https://github.com/soyjuanjohernandez","newsletter":"https://soyjuanjohernandez.github.io/juanjoWeb/"},"imageURL":"https://github.com/soyjuanjohernandez.png","key":"juanjo"}],"frontMatter":{"slug":"regular-vs-arrow","title":"Diferencia entre funciones normales y funciones flecha en javascript","authors":["juanjo"],"tags":["javascript","frontend","conceptos-basicos"],"image":"./functions.png","hide_table_of_contents":false},"unlisted":false,"nextItem":{"title":"Expresiones regulares en CSS","permalink":"/blog/regex-in-css"}},"content":"![funciones JS](./functions.png)\\r\\n\\r\\nLa diferencia principal entre una **funci\xf3n flecha - arrow function** y una **funci\xf3n normal** en JavaScript \x3c!-- truncate --\x3e radica en c\xf3mo manejan el contexto de **`this`**, aunque tambi\xe9n hay diferencias de sintaxis.\\r\\n\\r\\n### 1. **Sintaxis**\\r\\n\\r\\n- **Funci\xf3n normal**\\r\\n\\r\\n  ```javascript\\r\\n  function sumar(a, b) {\\r\\n    return a + b;\\r\\n  }\\r\\n  ```\\r\\n\\r\\n- **Funci\xf3n flecha - Arrow function**\\r\\n\\r\\n  ```jsx showLineNumbers\\r\\n  const sumar = (a, b) => {\\r\\n    return a + b;\\r\\n  };\\r\\n  ```\\r\\n\\r\\n  **Diferencias:**\\r\\n\\r\\n  - Las **arrow functions** pueden tener una sintaxis m\xe1s corta.\\r\\n  - Si solo tienen una expresi\xf3n, el resultado se retorna autom\xe1ticamente (sin necesidad de usar `return`), esto se conoce como **retorno impl\xedcito**\\r\\n    ```jsx\\r\\n    const sumar = (a, b) => a + b;\\r\\n    ```\\r\\n  - Si hay un solo par\xe1metro, se pueden omitir los par\xe9ntesis\\r\\n\\r\\n    ```javascript\\r\\n    const cuadrado = (x) => x * x;\\r\\n    ```\\r\\n\\r\\n    <br></br>\\r\\n\\r\\n    ### Veamos la transformaci\xf3n de una funci\xf3n normal a una funci\xf3n flecha en su m\xednima expreci\xf3n:\\r\\n\\r\\n    1. Funci\xf3n normal\\r\\n\\r\\n       ```javascript\\r\\n       function sumar(a, b) {\\r\\n         return a + b;\\r\\n       }\\r\\n       ```\\r\\n\\r\\n    2. Convirtiendola en funci\xf3n flecha\\r\\n\\r\\n       ```jsx showLineNumbers\\r\\n       const sumar = (a, b) => {\\r\\n         return a + b;\\r\\n       };\\r\\n       ```\\r\\n\\r\\n    3. Al solo retornar una exprei\xf3n se deja el retorno impl\xedcito\\r\\n\\r\\n       ```jsx showLineNumbers\\r\\n       const sumar = (a, b) => a + b;\\r\\n       ```\\r\\n\\r\\n  <br></br>\\r\\n\\r\\n### 2. **`this` y el contexto**\\r\\n\\r\\n- **Funci\xf3n normal**\\r\\n\\r\\n  El valor de `this` depende de c\xf3mo se llama a la funci\xf3n. Puede cambiar seg\xfan el contexto, por ejemplo, si se usa en un objeto, evento o funci\xf3n constructora.\\r\\n\\r\\n  ```javascript\\r\\n  const obj = {\\r\\n    valor: 10,\\r\\n    sumar: function () {\\r\\n      return this.valor + 5;\\r\\n    },\\r\\n  };\\r\\n\\r\\n  console.log(obj.sumar()); // 15\\r\\n  ```\\r\\n\\r\\n- **Arrow function**\\r\\n\\r\\n  Al utilizar una funci\xf3n de flecha esta no crea autom\xe1ticamente una variable `this`. Como resultado, cualquier referencia a `this` apuntar\xeda a lo que `this` era antes de que se creara la funci\xf3n\\r\\n\\r\\n  ```javascript\\r\\n  const obj = {\\r\\n    valor: 10,\\r\\n    sumar: () => this.valor + 5, // `this` no apunta al objeto\\r\\n  };\\r\\n\\r\\n  console.log(obj.sumar()); // NaN, porque `this.valor` es undefined\\r\\n  ```\\r\\n\\r\\n  ```javascript\\r\\n  const obj = {\\r\\n    nombre: \\"Juanjo\\",\\r\\n    print: () => console.log(this), // `this` no apunta al objeto\\r\\n  };\\r\\n\\r\\n  console.log(obj.print()); // Window (objeto global)\\r\\n  ```\\r\\n\\r\\n  Esto hace que las **arrow functions** sean ideales para callbacks, como en los m\xe9todos de array o los manejadores de eventos, donde no se desea que `this` cambie.\\r\\n\\r\\n  <br></br>\\r\\n\\r\\n### 3. **Uso con constructores**\\r\\n\\r\\n- **Funci\xf3n normal**\\r\\n\\r\\n  Se pueden usar funciones normales como constructores con `new`.\\r\\n\\r\\n  ```javascript\\r\\n  function Persona(nombre) {\\r\\n    this.nombre = nombre;\\r\\n  }\\r\\n  const persona = new Persona(\\"Juan\\");\\r\\n  console.log(persona.nombre); // \\"Juan\\"\\r\\n  ```\\r\\n\\r\\n- **Arrow function**\\r\\n\\r\\n  No se pueden usar como constructores y lanzan un error si intentas hacerlo.\\r\\n\\r\\n  ```javascript\\r\\n  const Persona = (nombre) => {\\r\\n    this.nombre = nombre;\\r\\n  };\\r\\n  const persona = new Persona(\\"Juan\\"); // Error: Persona is not a constructor\\r\\n  ```\\r\\n\\r\\n  <br></br>\\r\\n\\r\\n### 4. **`arguments`**\\r\\n\\r\\n- **Funci\xf3n normal**\\r\\n\\r\\n  Las funciones normales tienen acceso al objeto especial `arguments`, que contiene los par\xe1metros pasados a la funci\xf3n.\\r\\n\\r\\n  ```javascript\\r\\n  function sumar() {\\r\\n    return Array.from(arguments).reduce((a, b) => a + b);\\r\\n  }\\r\\n\\r\\n  console.log(sumar(1, 2, 3)); // 6\\r\\n  ```\\r\\n\\r\\n- **Arrow function**\\r\\n\\r\\n  Las arrow functions no tienen el objeto `arguments`, pero se puede usar el operador [**rest**](https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/rest_parameters) agregado en la versi\xf3n de Ecmascript 2015 ES5 (`...args`).\\r\\n\\r\\n  ```javascript\\r\\n  const sumar = (...args) => args.reduce((a, b) => a + b);\\r\\n\\r\\n  console.log(sumar(1, 2, 3)); // 6\\r\\n  ```\\r\\n\\r\\n### Resumen\\r\\n\\r\\n| Caracter\xedstica       | Funci\xf3n Normal                    | Arrow Function                |\\r\\n| -------------------- | --------------------------------- | ----------------------------- |\\r\\n| Sintaxis             | Verbosa                           | M\xe1s corta                     |\\r\\n| `this`               | Depende del contexto de ejecuci\xf3n | Hereda el `this` del contexto |\\r\\n| Uso como constructor | Permitido                         | No permitido                  |\\r\\n| `arguments`          | Disponible                        | No disponible, usa `...args`  |\\r\\n| Retorno impl\xedcito    | No                                | S\xed, si es una sola expresi\xf3n  |"},{"id":"regex-in-css","metadata":{"permalink":"/blog/regex-in-css","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/regex-css/regex-css.mdx","source":"@site/blog/regex-css/regex-css.mdx","title":"Expresiones regulares en CSS","description":"Regex in css","date":"2025-01-10T19:31:21.000Z","tags":[{"inline":false,"label":"CSS","permalink":"/blog/tags/css","description":"Aprende CSS, el lenguaje de estilos para dise\xf1ar p\xe1ginas web atractivas."},{"inline":false,"label":"Regex","permalink":"/blog/tags/regex","description":"Todo sobre expresiones regulares, patrones de b\xfasqueda y manipulaci\xf3n de texto."},{"inline":false,"label":"Expresiones regulares","permalink":"/blog/tags/expresiones-regulares","description":"Todo sobre expresiones regulares, patrones de b\xfasqueda y manipulaci\xf3n de texto."},{"inline":false,"label":"Frontend","permalink":"/blog/tags/frontend","description":"Explora el desarrollo front-end, desde el dise\xf1o hasta la interacci\xf3n del usuario."}],"readingTime":1.895,"hasTruncateMarker":true,"authors":[{"name":"Juan Jos\xe9 Pel\xe1ez","title":"Codevs member","url":"https://soyjuanjohernandez.github.io/juanjoWeb/","page":{"permalink":"/blog/authors/all-juanjo-articles"},"socials":{"x":"https://x.com/soyjuanjoh","linkedin":"https://www.linkedin.com/in/soyjuanjohernandez/","github":"https://github.com/soyjuanjohernandez","newsletter":"https://soyjuanjohernandez.github.io/juanjoWeb/"},"imageURL":"https://github.com/soyjuanjohernandez.png","key":"juanjo"}],"frontMatter":{"slug":"regex-in-css","title":"Expresiones regulares en CSS","authors":["juanjo"],"tags":["css","regex","expresiones-regulares","frontend"],"image":"./header_regex_css.PNG","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Diferencia entre funciones normales y funciones flecha en javascript","permalink":"/blog/regular-vs-arrow"},"nextItem":{"title":"\xa1Bienvenidos a codevs.co!","permalink":"/blog/welcome"}},"content":"![Regex in css](./header_regex_css.PNG)\\r\\n\\r\\nLas expresiones regulares, tambi\xe9n llamadas regex, son una herramienta poderosa para buscar y manipular textos. Aunque las expresiones regulares no son nativas de CSS, se pueden utilizar en combinaci\xf3n con **selectores de atributos** para aplicar estilos de manera precisa.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nEn este art\xedculo, exploraremos c\xf3mo las regex pueden ser aprovechadas en CSS para mejorar la flexibilidad y eficiencia de tus hojas de estilo.\\r\\n\\r\\n## Selectores de Atributos en CSS\\r\\n\\r\\nLos selectores de atributos en CSS permiten seleccionar elementos bas\xe1ndose en el valor de uno de sus atributos. Estos selectores son muy \xfatiles para aplicar estilos a elementos espec\xedficos sin necesidad de a\xf1adir clases adicionales o modificar el HTML. Los selectores de atributos se escriben entre corchetes (`[]`) y pueden ser utilizados de varias maneras para lograr diferentes niveles de coincidencia.\\r\\n\\r\\n## Tipos de Selectores de Atributos\\r\\n\\r\\n### 1. **Selector exacto (`[attr=\\"value\\"]`)**:\\r\\n\\r\\n    Selecciona elementos cuyo atributo `attr` es exactamente igual a `value`.\\r\\n\\r\\n    ```css title=\\"CSS\\"\\r\\n    a[href=\\"https://example.com\\"] {\\r\\n        color: red;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n    ```html title=\\"HTML\\"\\r\\n    <a href=\\"https://example.com\\">Example</a>\\r\\n    <a href=\\"https://another.com\\">Another</a>\\r\\n    ```\\r\\n\\r\\n\\r\\n    :::info[Resultado]\\r\\n        <div>\\r\\n            <a href=\\"https://example.com\\" style={{color: \'red\'}}>Example</a>\\r\\n        <br></br>\\r\\n            <a href=\\"https://another.com\\">Another</a>\\r\\n        </div>\\r\\n    :::\\r\\n\\r\\n    <br></br>\\r\\n\\r\\n### 2. **Contiene una palabra exacta (`[attr~=\\"value\\"]`)**:\\r\\n\\r\\n    Selecciona elementos cuyo atributo `attr` contiene una palabra exacta `value`.\\r\\n\\r\\n    ```css title=\\"CSS\\"\\r\\n    [title~=\\"flower\\"] {\\r\\n        border: 1px solid red;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n    ```html title=\\"HTML\\"\\r\\n    <div title=\\"red flower\\">Red Flower</div>\\r\\n    <div title=\\"blue sky\\">Blue Sky</div>\\r\\n    ```\\r\\n\\r\\n    :::info[Resultado]\\r\\n    <div title=\\"red flower\\" style={{border: \'1px solid red\'}}>Red Flower</div>\\r\\n    <br></br>\\r\\n    <div title=\\"blue sky\\">Blue Sky</div>\\r\\n    :::\\r\\n    <br></br>\\r\\n\\r\\n### 3. **Empieza con (`[attr^=\\"value\\"]`)**:\\r\\n\\r\\n    Selecciona elementos cuyo atributo `attr` empieza con `value`.\\r\\n\\r\\n    ```css title=\\"CSS\\"\\r\\n    a[href^=\\"https\\"] {\\r\\n        color: green;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n    ```html title=\\"HTML\\"\\r\\n    <a href=\\"https://example.com\\">Secure Link</a>\\r\\n    <a href=\\"http://example.com\\">Insecure Link</a>\\r\\n    ```\\r\\n\\r\\n    :::info[Resultado]\\r\\n        <a href=\\"https://example.com\\" style={{color: \'green\'}}>Secure Link</a>\\r\\n        <br></br>\\r\\n        <a href=\\"http://example.com\\">Insecure Link</a>\\r\\n    :::\\r\\n\\r\\n    <br></br>\\r\\n\\r\\n### 4. **Termina con (`[attr$=\\"value\\"]`)**:\\r\\n\\r\\n    Selecciona elementos cuyo atributo `attr` termina con `value`.\\r\\n\\r\\n    ```css title=\\"CSS\\"\\r\\n    a[href$=\\".pdf\\"] {\\r\\n        color: red;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n    ```html title=\\"HTML\\"\\r\\n    <a href=\\"document.pdf\\">PDF Document</a>\\r\\n    <a href=\\"image.png\\">Image</a>\\r\\n    ```\\r\\n\\r\\n    :::info[Resultado]\\r\\n    <a href=\\"document.pdf\\"  style={{color: \'red\'}}>PDF Document</a>\\r\\n    <br></br>\\r\\n    <a href=\\"image.png\\">Image</a>\\r\\n\\r\\n:::\\r\\n\\r\\n    <br></br>\\r\\n\\r\\n### 5. **Contiene (`[attr*=\\"value\\"]`)**:\\r\\n\\r\\n    Selecciona elementos cuyo atributo `attr` contiene `value` en cualquier parte.\\r\\n\\r\\n    ```css title=\\"CSS\\"\\r\\n    a[href*=\\"example\\"] {\\r\\n         color: red;\\r\\n    }\\r\\n    ```\\r\\n\\r\\n    ```html title=\\"HTML\\"\\r\\n    <a href=\\"https://example.com\\">Example</a>\\r\\n    <a href=\\"https://test.com\\">Test</a>\\r\\n    ```\\r\\n    :::info[Resultado]\\r\\n        <a href=\\"https://example.com\\" style={{color: \'red\'}}>Example</a>\\r\\n        <br></br>\\r\\n        <a href=\\"https://test.com\\">Test</a>\\r\\n    :::\\r\\n\\r\\nEstos selectores permiten una gran flexibilidad y pueden ser combinados con otros selectores para crear reglas de estilo m\xe1s espec\xedficas y poderosas."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-12-14-welcome.mdx","source":"@site/blog/2024-12-14-welcome.mdx","title":"\xa1Bienvenidos a codevs.co!","description":"\xa1Bienvenidos a codevs.co!","date":"2024-12-14T00:00:00.000Z","tags":[{"inline":false,"label":"Tecnolog\xeda","permalink":"/blog/tags/tecnologia","description":"Descubre tendencias, herramientas e innovaciones que transforman el mundo a trav\xe9s de la tecnolog\xeda"},{"inline":false,"label":"Comunidad","permalink":"/blog/tags/comunidad","description":"Un espacio para conectar, colaborar y crecer junto a apasionados de la tecnolog\xeda."},{"inline":false,"label":"Codevs.co","permalink":"/blog/tags/codevs-co","description":"Noticias, proyectos y contenido destacado de la comunidad de codevs.co."}],"readingTime":1.06,"hasTruncateMarker":true,"authors":[{"name":"Juan Jos\xe9 Pel\xe1ez","title":"Codevs member","url":"https://soyjuanjohernandez.github.io/juanjoWeb/","page":{"permalink":"/blog/authors/all-juanjo-articles"},"socials":{"x":"https://x.com/soyjuanjoh","linkedin":"https://www.linkedin.com/in/soyjuanjohernandez/","github":"https://github.com/soyjuanjohernandez","newsletter":"https://soyjuanjohernandez.github.io/juanjoWeb/"},"imageURL":"https://github.com/soyjuanjohernandez.png","key":"juanjo"},{"name":"Cesar Quintero","title":"Codevs member","url":"https://github.com/cequintero","page":{"permalink":"/blog/authors/all-cesar-articles"},"socials":{"github":"https://github.com/cequintero"},"imageURL":"https://github.com/cequintero.png","key":"cesar"}],"frontMatter":{"slug":"welcome","title":"\xa1Bienvenidos a codevs.co!","authors":["juanjo","cesar"],"tags":["tecnolog\xeda","comunidad","codevs"],"image":"../static/main_500px.png"},"unlisted":false,"prevItem":{"title":"Expresiones regulares en CSS","permalink":"/blog/regex-in-css"}},"content":"## \xa1Bienvenidos a codevs.co!\\r\\n\\r\\n\xa1Hola, comunidad!\\r\\n\\r\\nNos emociona darles la bienvenida a codevs.co, un espacio creado para todos los apasionados de la tecnolog\xeda, el desarrollo de software y la innovaci\xf3n. Este blog nace como una extensi\xf3n de nuestra visi\xf3n: construir una comunidad colaborativa donde las ideas fluyan, los conocimientos se compartan y los proyectos cobren vida.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n### \xbfQu\xe9 encontrar\xe1s en codevs.co?\\r\\n\\r\\nEn este blog, queremos ser tu fuente de inspiraci\xf3n y aprendizaje. Publicaremos contenido pensado para desarrolladores, dise\xf1adores, entusiastas y cualquier persona interesada en el mundo de la tecnolog\xeda. Algunos de los temas que puedes esperar incluyen:\\r\\n\\r\\n- Gu\xedas t\xe9cnicas sobre herramientas, frameworks y lenguajes de programaci\xf3n.\\r\\n\\r\\n- Historias de proyectos y experiencias de colaboradores de la comunidad.\\r\\n\\r\\n- An\xe1lisis de tendencias tecnol\xf3gicas y novedades de la industria.\\r\\n\\r\\n- Recursos educativos para mejorar tus habilidades.\\r\\n\\r\\n- Entrevistas con profesionales destacados y visionarios del sector.\\r\\n\\r\\n### Nuestra filosof\xeda\\r\\n\\r\\nCreemos que la tecnolog\xeda tiene el poder de transformar el mundo, y que el conocimiento crece cuando se comparte. Este espacio es inclusivo, colaborativo y est\xe1 dise\xf1ado para impulsar la creatividad y el desarrollo profesional de todos sus integrantes.\\r\\n\\r\\n\xa1Bienvenidos a codevs.co!\\r\\n\\r\\n\x3c!-- [Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\r\\n\\r\\nHere are a few tips you might find useful. --\x3e"}]}}')}}]);